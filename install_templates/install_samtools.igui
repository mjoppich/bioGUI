#! Install samtools-1.3.1


if [ ! "$2" = "" ]; then

    if [ "$(uname)" == "Darwin" ]; then

        echo "Installing brew gcc"
        brew install gcc zlib 

    else

		echo "Installing dependencies"
		echo $2 | sudo -S apt-get update
		echo $2 | sudo -S apt-get -y install libncurses5-dev zlib1g-dev
    fi

else
   echo "No sudo password, not installing dependencies"
fi

## set all variables
PROG=samtools-1.3.1
PROGNICE=Samtools 1.3.1
PROGDIR=$1

if [ -z "${PROGDIR}" ]; then
	PROGDIR=~/bioGUI/progs/
fi

PROGDIRESC=$(echo $PROGDIR | sed 's/ /\\ /g')
APPBINARYDIR=${PROGDIR}/${PROG}/bin


## create progdir
mkdir -p "$PROGDIR"

#download and unzip
#if [ ! -f "$PROGDIR/$PROG.tar.bz2" ]; then
#fi

wget https://github.com/samtools/samtools/releases/download/1.3.1/samtools-1.3.1.tar.bz2 -O "$PROGDIR/$PROG.tar.bz2"


if [ ! -d "$PROGDIR/$PROG" ]; then
	tar xvfj "$PROGDIR/$PROG.tar.bz2" -C "$PROGDIR"
fi

cd "$PROGDIR/$PROG"

./configure
make
make prefix=. install

if [ $# -gt 2 ]; then

	if [ "$3" = "1" ]; then

		if ! grep -q "$PROGDIRESC/$PROG" ~/.bashrc; then
			echo "export PATH=\"$PROGDIRESC/$PROG:\$PATH\" " >> ~/.bashrc;
		fi
	fi

fi

APPBINARYESC="${PROGDIRESC}/${PROG}/"
APPBINARY="${PROGDIRESC}/${PROG}/samtools"
if [ -z "$(ls -A ${APPBINARYESC})" ] || [ ! -f ${APPBINARY} ]; then
   (>&2 echo ${APPBINARYESC})
   (>&2 ls ${APPBINARYESC})

   (>&2 echo " \n \n \n")

   (>&2 echo ${PROGDIRESC})
   (>&2 ls ${PROGDIRESC})

    (>&2 echo " \n \n \n")

   (>&2 echo ${APPBINARY})
   (>&2 ls ${APPBINARY})
   
   (>&2 echo " \n \n \n")

   (>&2 echo "ERROR: The application directory is empty after installation.")
   (>&2 echo "ERROR: If you experience problems please re-install the software and create an issue on https://github.com/mjoppich/bioGUI.")
   (>&2 echo "ERROR: For creating the issue, please upload the log.txt file of your installation attempt.")

    (>&2 echo " \n \n \n")

else

    echo "${PROG} has been installed into ${APPBINARYESC}"
    echo "Binary location ${APPBINARY}"

fi

if [ $# -eq 5 ]; then

IP=$4
PORT=$5
       
echo "Sending Template to $IP at $PORT"

NCCMD=""

if [ "$(uname)" == "Darwin" ]; then
	NCCMD="nc -c $IP $PORT"
else
	NCCMD="nc -q 0 $IP $PORT"
fi


$NCCMD <<EOF

<template description="Samtools" title="${PROGNICE}">
<window title="Samtools 1.3.1">
<vgroup>

  <group title="Alignment Information">
	<checkbox id="WSLsel" value="true" selectonwindows="true">run in WSL?</checkbox>
  </group>
    
  <group title="samtools sort">
	<filedialog id="samtools_sort_input">Input sam/bam file</filedialog>
	<filedialog id="samtools_sort_output" output="true">Output bam-File</filedialog>
	<action program="samtools_sort">Run samtools sort</action>
  </group>
  
    
  <group title="Advanced">
	<label>Used Processors</label><input id="samtools_num_proc" type="int">2</input>
	<label>Additional command-line flags</label><input id="stringtie_advanced_options"></input>
  </group>
  
    <streambox id="output1">
    <stream id="outputstream1">std out</stream>
    <stream id="outputstream2">err out</stream>
   </streambox>

</vgroup>
</window>

<execution>
<const id="bindir">${APPBINARYDIR}</const>

<relocate id="samtools_sort_input_rel" wsl="\${WSLsel}" from="\${samtools_sort_input}"/>
<relocate id="samtools_sort_output_rel" wsl="\${WSLsel}" from="\${samtools_sort_output}"/>


  <execute program="samtools_sort" param="sort -@ \${samtools_num_proc} -o \${samtools_sort_output_rel} \${samtools_sort_input_rel}" location="\${bindir}/" exec="samtools" wsl="WSLsel">
    <output type="COUT" color="green" to="outputstream1" />
    <output type="CERR" color="red" to="outputstream2" />
  </execute>
  
</execution>  
</template>


EOF

fi