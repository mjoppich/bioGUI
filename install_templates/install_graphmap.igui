#! Install graphmap (github))

if [ "$(uname)" == "Darwin" ]; then
	source ~/.bash_profile
else
  echo ""
fi

if [ ! "$2" = "" ]; then

    if [ "$(uname)" == "Darwin" ]; then

        echo "Installing brew gcc"
        brew install gcc@8

        alias gcc='gcc-8'
        alias g++='g++-8'

    else

        echo "No dependencies"

    fi

else
   echo "No sudo password, not installing dependencies"
fi


## set all variables
PROG=graphmap
PROGDIR=$1



if [ -z "${PROGDIR}" ]; then
   PROGDIR=~/bioGUI/progs/
fi


PROGDIRESC=$(echo $PROGDIR | sed 's/ /\\ /g')
APPBINARYDIR=${PROGDIR}/${PROG}/bin/Linux-x64/

if [ -d "$PROGDIR/$PROG" ]; then
    echo "Removing Folder $PROGDIR/$PROG"
    rm -rf "$PROGDIR/$PROG"
fi

## create progdir
mkdir -p "$PROGDIR/$PROG"

#download and unzip
git clone https://github.com/isovic/graphmap.git "$PROGDIR/$PROG"

cd "$PROGDIR/$PROG"

make modules

if [ "$(uname)" == "Darwin" ]; then
	make GCC=g++-8
else
	make
fi


if [ $# -gt 2 ]; then
   if [ "$3" = "1" ]; then

      if ! grep -q "$PROGDIRESC/$PROG/bin/Linux-x64/" ~/.bashrc; then
         echo "export PATH=\"$PROGDIRESC/$PROG/bin/Linux-x64/:\$PATH\" " >> ~/.bashrc;
      fi
   fi
fi

APPBINARYESC="${PROGDIRESC}/${PROG}/bin/Linux-x64/"
APPBINARY="${PROGDIRESC}/${PROG}/bin/Linux-x64/graphmap"
if [ -z "$(ls -A ${APPBINARYESC})" ] || [ ! -f ${APPBINARY} ]; then
   (>&2 echo ${APPBINARYESC})
   (>&2 ls ${APPBINARYESC})

   (>&2 echo " \n \n \n")

   (>&2 echo ${PROGDIRESC})
   (>&2 ls ${PROGDIRESC})

    (>&2 echo " \n \n \n")

   (>&2 echo ${APPBINARY})
   (>&2 ls ${APPBINARY})
   
   (>&2 echo " \n \n \n")

   (>&2 echo "ERROR: The application directory is empty after installation.")
   (>&2 echo "ERROR: If you experience problems please re-install the software and create an issue on https://github.com/mjoppich/bioGUI.")
   (>&2 echo "ERROR: For creating the issue, please upload the log.txt file of your installation attempt.")

    (>&2 echo " \n \n \n")

else

    echo "${PROG} has been installed into ${APPBINARYESC}"
    echo "Binary location ${APPBINARY}"

fi

if [ $# -eq 5 ]; then

IP=$4
PORT=$5

echo "Sending Template to $IP at $PORT"


NCCMD=""

if [ "$(uname)" == "Darwin" ]; then
	NCCMD="nc -c $IP $PORT"
else
	NCCMD="nc -q 0 $IP $PORT"
fi


$NCCMD <<EOF

<!--<?xml version="1.0" encoding="UTF-8")>-->

<template description="graphmap ($PROG)" title="graphmap">



<window width="500" height="1000" title="graphmap">

  <vgroup>


    <group title="Alignment Options">
    
    
        <label>Program Mode (not all options used in all modes)</label>
        <combobox id="graphmap_mode" selected="align">
            <comboitem value="align">Alignment-Mode</comboitem>
            <comboitem value="owler">Overlap-Mode</comboitem>
        </combobox>
                
        <label>Input Reference</label> <filedialog id="graphmap_align_reference" output="false">Select Input Reference (fa)</filedialog>
        <label>Input Reads</label> <filedialog id="graphmap_align_reads" output="false">Select Input Reads (fq)</filedialog>
        
        <label>Input Transcriptome</label> <filedialog id="graphmap_align_gtf" output="false">Select Input Annotation (gtf)</filedialog>
        
        <label>Alignment Output</label> <filedialog id="graphmap_align_output" output="true">Select Output Sam-File</filedialog>
        
        <label>Alignment Algorithm</label>
        <combobox id="graphmap_align_mode" selected="anchor">
            <comboitem value="anchor">Anchored alignment with end-to-end extension</comboitem>
            <comboitem value="anchorgotoh">Anchored alignment with Gotoh</comboitem>
            <comboitem value="sg">Myers' bit-vector approach. Semiglobal.</comboitem>
            <comboitem value="sggotoh">Gotoh alignment (semi-global) with affine gaps.</comboitem>

        </combobox>
        
        <label>Additional Options</label><input id="graphmap_options"></input>
    
    
        <action program="graphmap" hint="click here to run program">Run Graphmap</action>  
    </group>


    <group title="General Options">
       <label>Run in WSL on Windows?</label><checkbox id="WSLsel" value="true" selectonwindows="true">Run in WSL?</checkbox>
       <label>Threads</label><input id="graphmap_threads" type="int">4</input>
    </group>
  
    <streambox linebreaks="TRUE" id="output1">
      <stream id="outputstream1">OS1</stream>
      <stream id="outputstream2">OS2</stream>
    </streambox>
 

  </vgroup>

</window>



<execution>

    <const id="bindir">${APPBINARYDIR}/</const>
    
    
    <relocate id="graphmap_align_reference_rel" from="\${graphmap_align_reference}" wsl="\${WSLsel}"/>
    <relocate id="graphmap_align_reads_rel" from="\${graphmap_align_reads}" wsl="\${WSLsel}"/>
    <relocate id="graphmap_align_gtf_rel" from="\${graphmap_align_gtf}" wsl="\${WSLsel}"/>
    <relocate id="graphmap_align_output_rel" from="\${graphmap_align_output}" wsl="\${WSLsel}"/>

    <add id="args" sep=" ">
        <value from="\${graphmap_mode}"/>
        <if comp="IS_SET" value1="\${graphmap_align_reference_rel}"  sep=" ">
            <const>-r</const>
            <value from="\${graphmap_align_reference_rel}"/>
        </if>

        <if comp="IS_SET" value1="\${graphmap_align_gtf}" sep=" ">
            <const>--gtf</const>
            <value from="\${graphmap_align_gtf_rel}"/>
        </if>

        <if comp="IS_SET" value1="\${graphmap_align_reads_rel}" sep=" ">
            <const>-d</const>
            <value from="\${graphmap_align_reads_rel}"/>
        </if>        


        <value from="\${graphmap_options}"/>
        
        <if comp="IS_SET" value1="\${graphmap_align_output_rel}" sep=" ">
            <const>-o</const>
            <value from="\${graphmap_align_output_rel}"/>
        </if>         

    </add>
    
    <execute program="graphmap" param="\${args}" location="\${bindir}" exec="graphmap" wsl="WSLsel">
        <output type="COUT" color="green" to="outputstream1" />
        <output type="CERR" color="red" to="outputstream2" />
    </execute>

  

</execution>
</template>


EOF

fi
