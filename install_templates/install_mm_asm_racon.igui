#! Install minimap2/miniasm/racon (github))

if [ "$(uname)" == "Darwin" ]; then
	source ~/.bash_profile
else
  echo ""
fi

if [ ! "$2" = "" ]; then

    if [ "$(uname)" == "Darwin" ]; then

        echo "Installing Dependencies (mac)"
        brew install cmake gcc@8
    else

        echo "Installing Dependencies (aptitude/Ubuntu)"
        echo $2 | sudo -S apt-get update
        echo $2 | sudo -S apt-get -y install cmake

    fi

else
   echo "No sudo password, not installing dependencies"
fi

## set all variables
PROG=MIMIRA
PROGDIR=$1

if [ -z "${PROGDIR}" ]; then
	PROGDIR=~/bioGUI/progs/
fi


PROGDIRESC=$(echo $PROGDIR | sed 's/ /\\ /g')
APPBINARYDIR=${PROGDIRESC}/${PROG}/bin/Linux-x64/

if [ -d "$PROGDIR/$PROG" ]; then
    echo "Removing Folder $PROGDIR/$PROG"
    rm -rf $PROGDIR/$PROG
fi

## create progdir
mkdir -p "$PROGDIR/$PROG"


cd "$PROGDIR/$PROG"
git clone https://github.com/lh3/minimap2 minimap2
cd minimap2

if [ "$(uname)" == "Darwin" ]; then
	make CC=gcc-8
else
	make
fi

cd "$PROGDIR/$PROG"
git clone https://github.com/lh3/miniasm miniasm
cd miniasm

if [ "$(uname)" == "Darwin" ]; then
	make CC=gcc-8
else
	make
fi

cd "$PROGDIR/$PROG"
git clone --recursive https://github.com/isovic/racon.git racon
cd racon
mkdir build
cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make

cd "$PROGDIR/$PROG"

git clone https://github.com/isovic/graphmap.git graphmap  
cd graphmap  
make modules  

if [ "$(uname)" == "Darwin" ]; then
	make GCC=g++-8
else
	make
fi

cd "$PROGDIR/$PROG"

if [ $# -gt 2 ]; then
	if [ "$3" = "1" ]; then

		if ! grep -q "$PROGDIRESC/$PROG/minimap2" ~/.bashrc; then
			echo "export PATH=\"$PROGDIRESC/$PROG/minimap2/:\$PATH\" " >> ~/.bashrc;
		fi
    
   	if ! grep -q "$PROGDIRESC/$PROG/miniasm" ~/.bashrc; then
			echo "export PATH=\"$PROGDIRESC/$PROG/miniasm/:\$PATH\" " >> ~/.bashrc;
		fi

		if ! grep -q "$PROGDIRESC/$PROG/racon/build/bin" ~/.bashrc; then
			echo "export PATH=\"$PROGDIRESC/$PROG/racon/build/bin/:\$PATH\" " >> ~/.bashrc;
		fi
    
		if ! grep -q "$PROGDIRESC/$PROG/graphmap/bin/Linux-x64" ~/.bashrc; then
			echo "export PATH=\"$PROGDIRESC/$PROG/graphmap/bin/Linux-x64/:\$PATH\" " >> ~/.bashrc;
		fi
    
	fi
fi

APPBINARYDIR=${PROGDIRESC}/${PROG}/
MINIMAP2BIN="$PROGDIRESC/$PROG/minimap2/minimap2"
MINIASMBIN="$PROGDIRESC/$PROG/miniasm/miniasm"
RACONBIN="$PROGDIRESC/$PROG/racon/build/bin/racon"
GRAPHMAPBIN="$PROGDIRESC/$PROG/graphmap/bin/Linux-x64/graphmap"

cat <<EOS > $APPBINARYDIR/assemble.sh
#!/usr/bin/sh
INREADS=\$1
ASMFOLDER=\$2
ASMPREFIX=\$3

# path to used executables
MINIMAP2BIN="\${4-minimap2}"
MINIASMBIN="\${5-miniasm}"
GRAPHMAPBIN="\${6-graphmap}"
RACONBIN="\${7-racon}"

THREADS="\${8-4}"

#echo \$INREADS
#echo \$ASMFOLDER
#echo \$ASMPREFIX
#echo \$MINIMAP2BIN
#echo \$MINIASMBIN
#echo \$GRAPHMAPBIN
#echo \$RACONBIN

# first we must overlap all reads with each other
\$MINIMAP2BIN -c --cs -x ava-ont -t\$THREADS \$INREADS \$INREADS > \$ASMFOLDER/\$ASMPREFIX.paf

# then miniasm can create alignment
\$MINIASMBIN -f \$INREADS \$ASMFOLDER/\$ASMPREFIX.paf > \$ASMFOLDER/\$ASMPREFIX.gfa

# extract unitigs from miniasm
awk '\$1 ~/S/ {print ">"\$2"\n"\$3}' \$ASMFOLDER/\$ASMPREFIX.gfa > \$ASMFOLDER/\$ASMPREFIX.unitigs.fasta

# align reads with unitigs
\$MINIMAP2BIN \$ASMFOLDER/\$ASMPREFIX.unitigs.fasta \$INREADS > \$ASMFOLDER/\$ASMPREFIX.unitigs.paf

# find contigs from unitigs
\$RACONBIN \$INREADS \$ASMFOLDER/\$ASMPREFIX.unitigs.paf \$ASMFOLDER/\$ASMPREFIX.unitigs.fasta > \$ASMFOLDER/\$ASMPREFIX.contigs.fasta

\$MINIMAP2BIN -x map-ont -a -t\$THREADS \$ASMFOLDER/\$ASMPREFIX.contigs.fasta \$INREADS > \$ASMFOLDER/\$ASMPREFIX.reads.mm2.sam
\$GRAPHMAPBIN align -r \$ASMFOLDER/\$ASMPREFIX.contigs.fasta -d \$INREADS -o \$ASMFOLDER/\$ASMPREFIX.reads.gm.sam


EOS

#sed -i -e 's/^MINIMAP2/$MINIMAP2BIN/g' "$PROGDIR/$PROG/assemble.sh"
#sed -i -e 's/^MINIASM/$MINIASMBIN/g' "$PROGDIR/$PROG/assemble.sh"
#sed -i -e 's/^RACON/$RACONBIN/g' "$PROGDIR/$PROG/assemble.sh"
#sed -i -e 's/^GRAPHMAP/$GRAPHMAPBIN/g' "$PROGDIR/$PROG/assemble.sh"  

APPBINARYESC="${PROGDIRESC}/${PROG}/"
APPBINARY="${PROGDIRESC}/${PROG}/"
if [ -z "$(ls -A ${APPBINARYESC})" ] || [ ! -f ${APPBINARY}/minimap2/minimap2 ] || [ ! -f ${APPBINARY}/miniasm/miniasm ] || [ ! -f ${APPBINARY}/graphmap/bin/Linux-x64/graphmap ] || [ ! -f ${APPBINARY}/racon/build/bin/racon ]; then
   (>&2 echo ${APPBINARYESC})
   (>&2 ls ${APPBINARYESC})

   (>&2 echo " \n \n \n")

   (>&2 echo ${PROGDIRESC})
   (>&2 ls ${PROGDIRESC})

    (>&2 echo " \n \n \n")

   (>&2 echo ${APPBINARY})
   (>&2 ls ${APPBINARY})
   
   (>&2 echo " \n \n \n")

   (>&2 echo "ERROR: The application directory is empty after installation.")
   (>&2 echo "ERROR: If you experience problems please re-install the software and create an issue on https://github.com/mjoppich/bioGUI.")
   (>&2 echo "ERROR: For creating the issue, please upload the log.txt file of your installation attempt.")

    (>&2 echo " \n \n \n")

else

    echo "${PROG} has been installed into ${APPBINARYESC}"
    echo "Binary location ${APPBINARY}"

fi


if [ $# -eq 5 ]; then

IP=$4
PORT=$5
       
echo "Sending Template to $IP at $PORT"

NCCMD=""

if [ "$(uname)" == "Darwin" ]; then
	NCCMD="nc -c $IP $PORT"
else
	NCCMD="nc -q 0 $IP $PORT"
fi


$NCCMD <<EOF

<template description="minimap/miniasm/racon assembly pipeline" title="MiMiRa">

<window width="500" height="1000" title="MiMiRa">

  <vgroup>


    <group title="Assembly Options">
    
                
        <label>Input Reads (Fastq)</label> <filedialog id="assembly_reads" output="false">Select Input Reference (fq)</filedialog>
        <label>Assembly/Output Folder</label> <filedialog id="assembly_dir" output="false" folder="true">Select Assembly Folder</filedialog>
        
        <label>Assembly Prefix</label><input id="assembly_prefix"></input>
  
        <action program="assembly" hint="Click Here to Start Assembly">Start Assembly</action>  
    </group>


    <group title="General Options">
       <label>Run in WSL on Windows?</label><checkbox id="WSLsel" value="true" selectonwindows="true">Run in WSL?</checkbox>
       <label>Threads</label><input id="assembly_threads" type="int">4</input>
    </group>
  
    <streambox linebreaks="TRUE" id="output1">
      <stream id="outputstream1">OS1</stream>
      <stream id="outputstream2">OS2</stream>
    </streambox>
 

  </vgroup>

</window>



<execution>
    <const id="bindir">${APPBINARYDIR}/</const>
    
    
    <relocate id="assembly_reads_rel" from="\${assembly_reads}" wsl="\${WSLsel}"/>
    <relocate id="assembly_dir_rel" from="\${assembly_dir}" wsl="\${WSLsel}"/>
    <add id="args">
	<const>${APPBINARYDIR}/assemble.sh</const>
    <value from="\${assembly_reads_rel}"/>
    <value from="\${assembly_dir_rel}"/>
    <value from="\${assembly_prefix}"/>
	<add sep="/">
		<value from="\${bindir}"/>
		<const>minimap2/minimap2</const>
	</add>
	<add sep="/">
		<value from="\${bindir}"/>
		<const>miniasm/miniasm</const>
	</add>
	<add sep="/">
		<value from="\${bindir}"/>
		<const>graphmap/bin/Linux-x64/graphmap</const>
	</add>
	<add sep="/">
		<value from="\${bindir}"/>
		<const>racon/build/bin/racon</const>
	</add>
        
        <if comp="IS_SET" value1="\${assembly_threads}">
            <value from="\${assembly_threads}"/>
        </if>             
    </add>
    
    <execute program="assembly" param="sh \${args}" location="/usr/bin/" exec="env" wsl="WSLsel">
        <output type="COUT" color="green" to="outputstream1" />
        <output type="CERR" color="red" to="outputstream2" />
    </execute>
  

</execution>
</template>


EOF

fi
