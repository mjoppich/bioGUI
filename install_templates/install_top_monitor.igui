#! Install Top Monitor (ssh example)

if [ "$(uname)" == "Darwin" ]; then
	source ~/.bash_profile
else
  echo ""
fi

if [ ! "$2" = "" ]; then

    if [ "$(uname)" == "Darwin" ]; then

        echo "Installing sshpass manually. Use with care!"

        brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb

    else

        echo "Dependencies: sshpass"
        echo $2 | sudo -S apt-get update
        echo $2 | sudo -S apt-get install sshpass

    fi
else
   echo "No sudo password, not installing dependencies"
fi

## set all variables
PROG=TOPMONITOR
PROGDIR=$1

if [ -z "${PROGDIR}" ]; then
	PROGDIR=~/bioGUI/progs/
fi


PROGDIRESC=$(echo $PROGDIR | sed 's/ /\\ /g')
APPBINARYDIR=${PROGDIRESC}/${PROG}/

if [ -d "$PROGDIR/$PROG" ]; then
    echo "Removing Folder $PROGDIR/$PROG"
    rm -rf $PROGDIR/$PROG
fi

## create progdir
mkdir -p "$PROGDIR/$PROG"

APPBINARYDIR=${PROGDIRESC}/${PROG}/

SSHPASSBIN=`which sshpass`

cat <<EOS > $APPBINARYDIR/topmonitor.sh
#!/usr/bin/sh

$SSHPASSBIN -p \$3 ssh -o StrictHostKeyChecking=no -p \$1 \$2@\$4 "ps -aux"

EOS

APPBINARYESC="${PROGDIRESC}/${PROG}/"
APPBINARY="${PROGDIRESC}/${PROG}/topmonitor.sh"
if [ -z "$(ls -A ${APPBINARYESC})" ] || [ ! -f ${APPBINARY} ]; then
   (>&2 echo ${APPBINARYESC})
   (>&2 ls ${APPBINARYESC})

   (>&2 echo " \n \n \n")

   (>&2 echo ${PROGDIRESC})
   (>&2 ls ${PROGDIRESC})

    (>&2 echo " \n \n \n")

   (>&2 echo ${APPBINARY})
   (>&2 ls ${APPBINARY})
   
   (>&2 echo " \n \n \n")

   (>&2 echo "ERROR: The application directory is empty after installation.")
   (>&2 echo "ERROR: If you experience problems please re-install the software and create an issue on https://github.com/mjoppich/bioGUI.")
   (>&2 echo "ERROR: For creating the issue, please upload the log.txt file of your installation attempt.")

    (>&2 echo " \n \n \n")

else

    echo "${PROG} has been installed into ${APPBINARYESC}"
    echo "Binary location ${APPBINARY}"

fi


if [ $# -eq 5 ]; then

IP=$4
PORT=$5
       
echo "Sending Template to $IP at $PORT"

NCCMD=""

if [ "$(uname)" == "Darwin" ]; then
	NCCMD="nc -c $IP $PORT"
else
	NCCMD="nc -q 0 $IP $PORT"
fi


$NCCMD <<EOF

<template description="TopMonitor (ssh example)" title="TopMonitor">

<window width="500" height="1000" title="TopMonitor">

  <vgroup>


    <group title="Connection Options">
    
                
        <label>Remote Port</label><input id="topm_remote_port"></input>
        <label>Remote User Name</label><input id="topm_remote_user"></input>
        <label>Remote User Password</label><input id="topm_remote_pw"  type="password"></input>
        <label>Remote Address</label><input id="topm_remote_addr"></input>
  
        <action program="assembly" hint="Click Here to Monitor">Start Monitor</action>  
    </group>


    <group title="General Options">
       <label>Run in WSL on Windows?</label><checkbox id="WSLsel" value="true" selectonwindows="true">Run in WSL?</checkbox>
    </group>
  
    <streambox linebreaks="TRUE" id="output1">
      <stream id="outputstream1">OS1</stream>
      <stream id="outputstream2">OS2</stream>
    </streambox>
 

  </vgroup>

</window>



<execution>
    <const id="bindir">${APPBINARYDIR}/</const>
    
    
    <add id="args">
	<const>${APPBINARYDIR}/topmonitor.sh</const>
    <value from="\${topm_remote_port}"/>
    <value from="\${topm_remote_user}"/>
    <value from="\${topm_remote_pw}"/>
    <value from="\${topm_remote_addr}"/>           
    </add>
    
    <execute program="assembly" param="bash \${args}" location="/usr/bin/" exec="env" wsl="WSLsel">
        <output type="COUT" color="green" to="outputstream1" />
        <output type="CERR" color="red" to="outputstream2" />
    </execute>
  

</execution>
</template>


EOF

fi
